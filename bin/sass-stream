#!/usr/bin/env node

var fs = require('fs'),
  path = require('path'),
  thru = require('through2'),
  gs = require('glob-stream'),
  sass = require(path.resolve('./index')),
  args = process.argv.slice(2),
  srcPath = args.shift(),
  flags = {},
  compileOpts = {},
  trim = function (s) {
    return s.replace(/^\s+/, '').replace(/\s+$/, '');
  },
  src, arg, val, parts;

while (args.length) {
  arg = trim(args.shift());
  parts = arg.split('=');
  arg = parts[0].slice(2);
  if (parts.length === 2) {
    if (compileOpts[arg]) {
      if (!Array.isArray(compileOpts[arg])) {
        compileOpts[arg] = [compileOpts[arg]];
      }
      compileOpts[arg].push(parts[1])
    } else {
      compileOpts[arg] = parts[1];
    }
  } else {
    flags[arg] = args.shift() || '';
  }
}

if (path.extname(srcPath) || !flags.main) {
  flags.main = srcPath;
} else {
  flags.main = path.resolve(srcPath, flags.main);
}

if (flags.main.indexOf('*') === -1 && !path.extname(flags.main)) {
  flags.main += flags.main[flags.main.length] === '/' ? '*' : '/*';
}

gs.create(flags.main)
  .pipe(thru.obj(function (file, enc, cb) {
    file.contents = file.contents || fs.readFileSync(file.path);
    file.relative = file.path.split('/').pop();
    this.push(file);
    cb();
  }))
  .pipe(sass({
    output: flags.output,
    compileOptions: compileOpts
  }));